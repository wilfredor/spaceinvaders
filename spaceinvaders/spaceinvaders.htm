<!--
Authors:

Wilfredo R. RodrÃ­guez H. (wilfredor@gmail.com)

	Copyright (C) 2013

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
	
!-->
<html>
	<body onkeydown="nave.move(event);" onmousedown="nave.fire();" onmousemove="nave.move(event);" bgcolor="black" >
			<div style="
			  position: fixed;
			  top: 0;
			  left: 0;
			  z-index: 999;
			  width: 800px;
			  margin-left:10px;
			  color:white;
			  height: 23px;
			  font-family:'Courier New';">
				<b>Level:</b><span id="level"></span>
				<b>Score:</b> <span id="score"></span>
				<b style="margin-left:15px;">Lives:</b> <span id="lives"></span>
			</div>
			

	</body>
</html>
<script type="text/javascript">
	
	//Canvas size
	canvasWidth = 800;
	canvasHeight = 500;
	

	var canvas = document.createElement("canvas");
    canvas.setAttribute('width', canvasWidth);
    canvas.setAttribute('height', canvasHeight);
	canvas.setAttribute('style', 'position:absolute;top:23px;');
	document.body.appendChild(canvas);
	
	var mouseX=0;

	//Enemy type images
	var enemiesType = new Array();
	for (var i=0;i<=2;i++)
	{
		enemiesType[i] = new Image();
		enemiesType[i].src = "images/enemies"+i+".svg";
	}
	
	var _level = document.getElementById("level");
	var _score = document.getElementById("score");
	var _lives = document.getElementById("lives");
	
	_level.innerHTML = 1;
	_score.innerHTML = 0;
	_lives.innerHTML = 3;
	
	var gameFinished =false;

	//Object Enemy
	function enemy()
	{
		this.init = function (x,y,width,height,context,index,enemyeType) {
			this.width = width;
			this.height = height;
			this.x = x;
			this.y = y;
			this.index = index;
			this.context = context;
			this.img = enemiesType[enemyeType];
			this.paint();
		}
		
		this.paint = function (src) {
			this.context.drawImage(this.img, this.x,this.y,this.width,this.height);

		}
		
		this.Obstruction = function () {
			for (var i = 0;i<=window.enemies.element.length-1;i++)
			{
				if ((window.enemies.element[i].x==this.x)&&(window.enemies.element[i].index>this.index))
					return true;
			}
			return false;
		}
		
		//Enemy fire
		this.fire = function () {
			this.directionFire(this.x,this.y,this);
		}
		//Fire direction
		this.directionFire = function (xPos,i,element) {
			setTimeout(function () {
				if (i<=canvasHeight-20) //If the fire is not in screen border
				{	
					//Creo el disparo y borro la estela
					element.context.fillStyle = "#FF0000";
					element.context.clearRect(xPos,i-20,3,9);
					element.context.fillRect(xPos,i,3,9);
					element.context.fillStyle = "#7fff00";
					//Recursividad, el disparo sigue
					element.directionFire(xPos,i+20,element);
				}
				else
				{
					if ((xPos>=window.nave.x)&&(xPos<=(window.nave.x+window.nave.width)))
					{	
						window.nave.lives--;
						if (window.nave.lives<=0)
						{
							alert("You are dead");
							window.location.reload();
						} else
						{
							alert("You have only "+window.nave.lives+" lives");
						}
						_lives.innerHTML = window.nave.lives;
					}else
						window.enemies.context.clearRect(xPos,i-20,3,9);
				}
			},30);
		}
	}
	//Enemies object array
	var enemies = new Object({
		init: function () {
			this.context = canvas.getContext("2d");
			this.x = 0;
			this.y = 0;
			this.width = 30;
			this.height = 30;
			this.element = new Array();
			this.initenemys();
			this.move();
		},
		removeenemys : function () {
			//Clean place
			//window.nave.height+9 is the nave height + canon
			this.context.clearRect(0,0,canvasWidth,canvasHeight - (window.nave.height+9));
		},//Remove a enemy bi index in enemies array
		remove: function (index) {
				this.element.splice(index,1);
				_score.innerHTML++;
				
				if (this.element.length==0)
				{
					alert ("You win");
					this.removeenemys();
					
					_level.innerHTML++;
					
					//Init enemies array
					enemies.init();

				}
		},
		initenemys: function () {
			var index = 0;
			for (var i = this.x+this.width;i<=canvasWidth-(this.width);i+=(this.width*2))
			{
				var enemyeType =0;
				for (var j = this.y;j<=(canvasHeight-this.height)/2+(canvasHeight-this.height)/6;j+=(this.height+this.height))
				{
					
					//Create a new enemy element and add to enemies array
					var enemy_element = new enemy();
					enemy_element.init(i,j,this.width,this.height,this.context,index,enemyeType);
					this.element.push(enemy_element);
					index++;
					if (enemyeType<enemiesType.length-1)
					enemyeType++;
				}
			}
			//this enemy go to fire
			this.enemyFire(1000);
		},//paint all enemies
		paint: function (move_left) {
			this.removeenemys();
			for (var i = 0;i<=this.element.length-1;i++)
			{
				this.element[i].paint();
			}
			return true;
		},//Move enemy elements  move elementos enemies Horizontally and Vertically
		moveXY: function (move_left) {
			for (var i = 0;i<=this.element.length-1;i++)
			{
			
				if (isset(move_left))
					this.element[i].x+=(move_left)?(-this.element[i].width):(this.element[i].width);
				else
					this.element[i].y+=this.y;
				this.element[i].paint();
				if (this.element[i].y>=(canvasHeight - 3*(window.nave.height)))
				{
					alert ("You are dead");
					window.location.reload();
					return false;
				}
			}
			return true;
		},//move elements enemies Horizontally
		moveX: function (move_left,speed) {
			var move =setTimeout(function(){
				window.enemies.removeenemys();
				
				if(window.enemies.moveXY(move_left))
					window.enemies.moveX(!move_left,speed);

			},speed);
		}, //move elements enemies Vertically
		moveY: function (speed) {
			setTimeout(function(){
				window.enemies.removeenemys();
				window.enemies.y+=window.enemies.height/5;
				
				if(window.enemies.moveXY())
						window.enemies.moveY(speed);
				
			},speed);
		}, 
		//Run fire to a enemy
		enemyFire: function(speed) {
			//First enemy in last row
			var noenemyRow = (window.enemies.element.length-(Math.round(canvasWidth/(this.width*2)))-1);
			setTimeout(function () {

				//Any enemy in last row
				var index = randomRange(0, window.enemies.element.length-1);

				window.enemies.element[index].fire();
					
				window.enemies.enemyFire(speed);
				
			},speed);
		
		},//Move enemies Vertically and Horizontally in the screen
		move: function() {
			this.moveX(true,800);
			//First speed level is 8000
			this.moveY(8000*_level.innerHTML);
			

		
		},//Check if a enemy in array is colision with a fire
		colision: function (x,y,width,height) {
			
			var x1_Fire = x;
			var y1_Fire = y;
			var x2_Fire = x+width;
			var y2_Fire = y+height;
			
			for (var i = 0;i<=this.element.length;i++)
			{
				if (this.element[i]) {
					var x1_enemy = this.element[i].x;
					var y1_enemy = this.element[i].y;
					var x2_enemy = this.element[i].x+this.element[i].width;
					var y2_enemy = this.element[i].y+this.element[i].height;
					
					//check colision areas
					if (((y2_enemy<=y2_Fire)&&(y2_enemy>=y1_Fire))||((y1_enemy>=y1_Fire)&&(y1_enemy<=y2_Fire)))
					{
					  if (((x1_Fire>=x1_enemy)&&(x1_Fire<=x2_enemy))||((x2_Fire<=x2_enemy)&&(x2_Fire>=x1_enemy)))
					  {
							console.log('killed '+i);
							this.remove(i);
							return true;
					  }
					   
					}
				}
			}
		}
	})
	//Object nave definition
	var nave = new Object({
		init : function () {
			
			this.context = canvas.getContext("2d");
			this.width = 50;
			this.height = 20;
			this.lives = _lives.innerHTML;
			this.shots = 0;
			this.maxshots = 3;
			this.x = 0;
			this.y = canvasHeight-this.height;
			this.paint();
			
		},
		fire: function () {
			if (this.shots<=this.maxshots)
			{
				this.shots++;
				var xPos = window.nave.x+25;
				var i=(canvasHeight-60);
				this.directionFire(xPos,i);

			}
			
		},
		directionFire: function(xPos,i)
		{
			if ((i<=-20))
				this.shots=0;
			setTimeout(function () {
				if (i>=-20) //If the fire is in screen border
				{	
					//create fire and delete track
					window.nave.context.clearRect(xPos,i+20,2,12);
					window.nave.context.fillRect(xPos,i,2,12);
					
					//if some enemy the fire stop
					if(enemies.colision(xPos,i,7,12))
					{
						i=-5;
						enemies.paint();
					//	this.shots=0;
					}
					//Recursion, the shot is going
					window.nave.directionFire(xPos,i-20);
				}
			},30);
		},
		paint: function () {
			//paint nave in relative screen position
			this.context.fillStyle = "#7fff00";
			this.context.clearRect(0,canvasHeight-(this.height+this.height/2),canvasWidth,canvasHeight);
			this.context.fillRect (this.x,this.y,this.width,this.height);	
			
			//Nave canon
			this.context.fillRect (this.x+24,canvasHeight-30,3,5);
			this.context.clearRect(this.x-4,canvasHeight-27,7,12);
			this.context.fillRect (this.x+22,canvasHeight-25,7,12);
			this.context.clearRect(this.x+this.width-3,canvasHeight-27,7,12);
			
		},
		moveLeft : function (step) {
			this.x-=this.width/step;
			if(this.x<=(-this.width))
				this.x=canvasWidth-this.width;
			this.paint();
			
		},
		moveRight : function (step) {
			this.x+=this.width/step;
			if(this.x>=canvasWidth)
				this.x=0;
			this.paint();
			
		},
		move : function (event) {
				var mouseXaux = event.clientX + document.body.scrollLeft;
				if (mouseX>mouseXaux)
					this.moveLeft(5);
				if (mouseX<mouseXaux)
					this.moveRight(5);
				
				if(mouseX!=mouseXaux)
					mouseX=mouseXaux;
			
				//alert (event.keyCode);
				if (event.keyCode==37)  //LEFT
					this.moveLeft(2);
				else
				if (event.keyCode==39)  //RIGHT
					this.moveRight(2);
				else
				if (event.keyCode==17)  //UP FIRE
					this.fire();
		}
	})
	//Init nave
	nave.init();
	//Init enemies
	enemies.init();
	
	
	//Some tools functions
	//Check if a var exist
	var isset = function(obj, props) {
		if ((typeof (obj) === 'undefined') || (obj === null))
			return false;
		else if (props && props.length > 0)
			return isset(obj[props.shift()], props);
		else
			return true;
	};
	
	//A random number multiple of 5
	function randomRange(min, max) {
	  return Math.round((Math.random()*(max-min)+min)/5)*5;
	}
</script>
